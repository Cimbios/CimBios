<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:a="http://langdale.com.au/2005/Message#"
	xmlns:sawsdl="http://www.w3.org/ns/sawsdl"
	xmlns="http://langdale.com.au/2009/Indent">

	<xsl:output indent="yes" method="xml" encoding="utf-8" />
	<xsl:param name="version"/>
	<xsl:param name="baseURI"/>
	<xsl:param name="ontologyURI"/>
	<xsl:param name="envelope">Profile</xsl:param>
	
	<xsl:template name="type">
		<xsl:param name="xstype" select="@xstype"/>
		<xsl:choose>
			<xsl:when test="$xstype = 'string'">string</xsl:when>
			<xsl:when test="$xstype = 'integer' or @xstype = 'int'">int</xsl:when>
			<xsl:when test="$xstype = 'float'">float</xsl:when>
			<xsl:when test="$xstype = 'double'">double</xsl:when>
			<xsl:when test="$xstype = 'boolean'">bool</xsl:when>
			<xsl:when test="$xstype = 'date'">DateOnly</xsl:when>
			<xsl:otherwise>object</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	<xsl:template name="property">
		<xsl:param name="name"/>
		<xsl:param name="xstype"/>
		<xsl:param name="type">
			<xsl:call-template name="type">
				<xsl:with-param name="xstype" select="$xstype"/>
			</xsl:call-template>
		</xsl:param>
		<xsl:param name="annotate"/>
		<xsl:param name="prop">
			<xsl:value-of select="translate($name,'_','')"/>
		</xsl:param>
		<item>
			public
			<xsl:value-of select="$type"/>
			<sp/>
			<xsl:value-of select="$name"/>
		</item>
		<list begin="{{" indent="    " end="}}">
			<item>get => ObjectData.GetAttribute&lt;<xsl:value-of select="$type"/>&gt;(nameof(<xsl:value-of select="@name"/>));</item>
			<item>set => ObjectData.SetAttribute&lt;<xsl:value-of select="$type"/>&gt;(nameof(<xsl:value-of select="@name"/>), value);</item>
		</list>
		<xsl:copy-of select="$annotate"/>
		<sp/>
	</xsl:template>
	
	<xsl:template name="assoc1toM"> <xsl:param name="name"/>
		<xsl:param name="xstype"/>
		<xsl:param name="type">
			<xsl:call-template name="type">
				<xsl:with-param name="xstype" select="$xstype"/>
			</xsl:call-template>
		</xsl:param>
		<item>public <xsl:value-of select="@type"/>[]? <xsl:value-of select="@name"/></item>
		<list begin="{{" indent="    " end="}}">
			<item>get => ObjectData.GetAssoc1ToM&lt;<xsl:value-of select="$type"/>&gt;(nameof(<xsl:value-of select="@name"/>));</item>
		</list>	
		<sp/>
		<item>public void AddTo<xsl:value-of select="@name"/>(<xsl:value-of select="@type"/> value)</item>
		<list begin="{{" indent="    " end="}}">
			<item>ObjectData.AddAssoc1ToM(nameof(<xsl:value-of select="@name"/>), value);</item>
		</list>		
		<sp/>
		<item>public void RemoveFrom<xsl:value-of select="@name"/>(<xsl:value-of select="@type"/> value)</item>
		<list begin="{{" indent="    " end="}}">
			<item>ObjectData.RemoveAssoc1ToM(nameof(<xsl:value-of select="@name"/>), value);</item>
		</list>		
		<sp/>
		<item>public void RemoveAllFrom<xsl:value-of select="@name"/>()</item>
		<list begin="{{" indent="    " end="}}">
			<item>ObjectData.RemoveAllAssoc1ToM(nameof(<xsl:value-of select="@name"/>));</item>
		</list>	
		<sp/>
	</xsl:template>
	
	<xsl:template name="assoc1to1"> <xsl:param name="name"/>
		<xsl:param name="xstype"/>
		<xsl:param name="type">
			<xsl:call-template name="type">
				<xsl:with-param name="xstype" select="$xstype"/>
			</xsl:call-template>
		</xsl:param>
		<item>public <xsl:value-of select="@type"/>? <xsl:value-of select="@name"/></item>
		<list begin="{{" indent="    " end="}}">
			<item>get => ObjectData.GetAssoc1To1&lt;<xsl:value-of select="$type"/>&gt;(nameof(<xsl:value-of select="@name"/>));</item>
			<item>set => ObjectData.SetAssoc1To1(nameof(<xsl:value-of select="@name"/>), value);</item>
		</list>	
		<sp/>
	</xsl:template>
 
 	<xsl:template name="annotate">
		<!--  generate and annotation -->
		<list begin="/// &lt;summary&gt;" indent="/// " end="/// &lt;/summary&gt;">
			<xsl:apply-templates mode="annotate"/>
		</list>
	</xsl:template>
 
	<xsl:template match="a:Catalog">
		<!--  the top level template  -->
		<document>
			<item>using CimBios.CimModel.CimDatatypeLib;</item>
			<list begin="/**" indent=" * " end=" */">
				<item>Annotated C# for <xsl:value-of select="$envelope" /></item>
				<item>Generated by CIMTool http://cimtool.org</item>
			</list>
			<item>namespace <xsl:value-of select="$envelope" /></item>
			<list begin="{{" indent="    " end="}}">
		    	<xsl:apply-templates/>
		  </list>
		</document>
	</xsl:template>
	
	<xsl:template match="a:ComplexType|a:Root|a:CompoundType">
		<xsl:variable name="super" select="a:SuperType[1]"/>

		<!-- a table -->
		<xsl:call-template name="annotate" />
		<item>[CimClass(&quot;<xsl:value-of select="$ontologyURI"/>#<xsl:value-of select="@name"/>&quot;)]</item>
		<item>public partial class <xsl:value-of select="@name"/>
			<xsl:choose>
				<xsl:when test="$super"> : <xsl:value-of select="$super/@name"/>, IModelObject
				</xsl:when>
				<xsl:otherwise> : ModelObject, IModelObject</xsl:otherwise>
			</xsl:choose>
		</item>
		<list begin="{{" indent="    " end="}}"> 
				<item>public <xsl:value-of select="@name"/>(DataFacade objectData) : base(objectData) {}</item>
				<sp/>
		    <xsl:apply-templates/>
		</list>
		<sp/>
	</xsl:template>
	
	<xsl:template match="a:EnumeratedType">
		<!-- a reference table for an enumeration -->
		<sp/>
		<xsl:call-template name="annotate" />
		<item>public enum <xsl:value-of select="@name"/></item>
		<list begin="{{" indent="    " end="}}">
			<xsl:apply-templates/>
		</list>
		<sp/>
	</xsl:template>
	
	<xsl:template match="a:EnumeratedValue">
		<xsl:call-template name="annotate" />
		<xsl:value-of select="@name"/>,
	</xsl:template>

	<xsl:template match="a:Instance|a:Reference">
		<xsl:choose>
			<xsl:when test="@maxOccurs &lt;= 1">
				<xsl:choose>
					<xsl:when test="a:Stereotype/@label = 'Attribute'">
						<decorate>
							<xsl:call-template name="annotate" />
							<xsl:call-template name="property">
								<xsl:with-param name="name" select="@name"/>
								<xsl:with-param name="type" select="@type"/>
								<xsl:with-param name="annotate"/>
							</xsl:call-template>
						</decorate>
					</xsl:when>
					<xsl:otherwise>
						<decorate>
							<xsl:call-template name="annotate" />
							<xsl:call-template name="assoc1to1">
									<xsl:with-param name="name" select="@name"/>
									<xsl:with-param name="type" select="@type"/>
							</xsl:call-template>	
						</decorate>						
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="annotate" />
				<xsl:call-template name="assoc1toM">
						<xsl:with-param name="name" select="@name"/>
						<xsl:with-param name="type" select="@type"/>
				</xsl:call-template>		
			</xsl:otherwise>
		</xsl:choose>	
	</xsl:template>
	
	<xsl:template match="a:Simple|a:Domain">
		<!-- a simple column  -->
		<xsl:if test="@maxOccurs &lt;= 1">
			<decorate>
				<xsl:call-template name="annotate" />
				<xsl:call-template name="property">
					<xsl:with-param name="name" select="@name"/>
					<xsl:with-param name="xstype" select="@xstype"/>
					<xsl:with-param name="annotate"/>
				</xsl:call-template>
			</decorate>
		</xsl:if>
	</xsl:template>
	
	<xsl:template match="a:Enumerated">
		<!-- a simple column  -->
		<xsl:if test="@maxOccurs &lt;= 1">
			<decorate>
				<xsl:call-template name="annotate" />
				<xsl:call-template name="property">
					<xsl:with-param name="name" select="@name"/>
					<xsl:with-param name="type" select="@type"/>
					<xsl:with-param name="annotate"/>
				</xsl:call-template>
			</decorate>
		</xsl:if>
	</xsl:template>

	<xsl:template match="a:Comment|a:Note" mode="annotate">
		<!--  generate human readable annotation -->
		<wrap width="70">
			<xsl:value-of select="."/>
		</wrap>
	</xsl:template>

	<xsl:template match="text()">
		<!--  dont pass text through  -->
	</xsl:template>

	<xsl:template match="node()" mode="config">
		<!-- dont pass any defaults in config mode -->
	</xsl:template>

	<xsl:template match="node()" mode="annotate">
		<!-- dont pass any defaults in annotate mode -->
	</xsl:template>

</xsl:stylesheet>
