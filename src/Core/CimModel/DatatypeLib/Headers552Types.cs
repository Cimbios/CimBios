/*
 *	CimBios Toolkit autogenerated CIM type library code.
 */
using System.Reflection.Metadata;
using CimBios.Core.CimModel.Schema;

namespace CimBios.Core.CimModel.CimDatatypeLib.Headers552;

[CimClass("http://www.w3.org/1999/02/22-rdf-syntax-ns#Description")]
public partial class Description
(string uuid, ICimMetaClass metaClass, bool isAuto = false)
    : ModelObject(uuid, metaClass, isAuto)
{
}
/// <summary>
///
/// </summary>
[CimClass(DifferenceModel.ClassUri)]
public partial class DifferenceModel
(string uuid, ICimMetaClass metaClass, bool isAuto = false)
    : Model(uuid, metaClass, isAuto)
{
    public const string ClassUri 
        = "http://iec.ch/TC57/61970-552/DifferenceModel/1#DifferenceModel";

    public ICollection<IModelObject> forwardDifferences
    {
        get
        {
            var statementProperty = TryGetMetaPropertyByName(
                nameof(forwardDifferences));

            if (statementProperty != null 
                && Statements.TryGetValue(statementProperty, out var statements))
            {
                return statements;
            }

            throw new Exception($"No {nameof(forwardDifferences)} statements property!");
        }
    }

    public ICollection<IModelObject> reverseDifferences
    {
        get
        {
            var statementProperty = TryGetMetaPropertyByName(
                nameof(reverseDifferences));

            if (statementProperty != null 
                && Statements.TryGetValue(statementProperty, out var statements))
            {
                return statements;
            }

            throw new Exception($"No {nameof(reverseDifferences)} statements property!");
        }
    }
}
/// <summary>
///
/// </summary>
[CimClass("http://iec.ch/TC57/61970-552/ModelDescription/1#FullModel")]
public partial class FullModel
(string uuid, ICimMetaClass metaClass, bool isAuto = false)
    : Model(uuid, metaClass, isAuto)
{
}
/// <summary>
///
/// </summary>
[CimClass("http://iec.ch/TC57/61970-552/ModelDescription/1#Model")]
public partial class Model
(string uuid, ICimMetaClass metaClass, bool isAuto = false)
    : ModelObject(uuid, metaClass, isAuto)
{

    /// <summary>
    ///
    /// </summary>
    public DateTime? created
    {
        get => GetAttribute<DateTime?>(nameof(created));
        set => SetAttribute(nameof(created), value);
    }
    /// <summary>
    ///
    /// </summary>
    public string? description
    {
        get => GetAttribute<string?>(nameof(description));
        set => SetAttribute(nameof(description), value);
    }
    /// <summary>
    ///
    /// </summary>
    public object? modelingAuthoritySet
    {
        get => GetAttribute<object?>(nameof(modelingAuthoritySet));
        set => SetAttribute(nameof(modelingAuthoritySet), value);
    }
    /// <summary>
    ///
    /// </summary>
    public object? profile
    {
        get => GetAttribute<object?>(nameof(profile));
        set => SetAttribute(nameof(profile), value);
    }
    /// <summary>
    ///
    /// </summary>
    public DateTime? scenarioTime
    {
        get => GetAttribute<DateTime?>(nameof(scenarioTime));
        set => SetAttribute(nameof(scenarioTime), value);
    }
    /// <summary>
    ///
    /// </summary>
    public int? version
    {
        get => GetAttribute<int?>(nameof(version));
        set => SetAttribute(nameof(version), value);
    }

    /// <summary>
    ///
    /// </summary>
    public Model[] DependentOn => GetAssoc1ToM<Model>(nameof(DependentOn));
    public void AddToDependentOn(Model assocObject) => AddAssoc1ToM(
        nameof(DependentOn), assocObject);
    public void RemoveFromDependentOn(Model assocObject) => RemoveAssoc1ToM(
        nameof(DependentOn), assocObject);
    public void RemoveAllFromDependentOn() => RemoveAllAssocs1ToM(
        nameof(DependentOn));
    /// <summary>
    ///
    /// </summary>
    public Model[] SupersededBy => GetAssoc1ToM<Model>(nameof(SupersededBy));
    public void AddToSupersededBy(Model assocObject) => AddAssoc1ToM(
        nameof(SupersededBy), assocObject);
    public void RemoveFromSupersededBy(Model assocObject) => RemoveAssoc1ToM(
        nameof(SupersededBy), assocObject);
    public void RemoveAllFromSupersededBy() => RemoveAllAssocs1ToM(
        nameof(SupersededBy));
}
